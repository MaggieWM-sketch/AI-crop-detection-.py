# -*- coding: utf-8 -*-
"""AI Crop Disease Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X7VMJWTx7fTRXRvdaVaJgkAgDm1-fMtb
"""

# Install required packages with version compatibility fixes
!pip install --upgrade numpy
!pip install --upgrade typing-extensions
!pip install --upgrade tensorflow
!pip install --upgrade streamlit
!pip install --upgrade plotly
!pip install --upgrade seaborn
!pip install --upgrade scikit-learn
!pip install --upgrade opencv-python
!pip install --upgrade pillow
!pip install --upgrade pyngrok
!pip install --upgrade gradio

# Import essential libraries
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
import cv2
from PIL import Image
import os
import zipfile
import requests
from io import BytesIO

# Download PlantVillage dataset
import requests # Import requests library
import os
import zipfile

dataset_url = "https://github.com/spMohanty/PlantVillage-Dataset/archive/master.zip"
response = requests.get(dataset_url)

# Define project_path
project_path = "." # Or specify your desired path

# Create data directory if it doesn't exist
data_dir = f'{project_path}/data/'
os.makedirs(data_dir, exist_ok=True)

# Save and extract dataset
zip_path = os.path.join(data_dir, 'plantvillage_dataset.zip')
with open(zip_path, 'wb') as f:
    f.write(response.content)

# Extract dataset
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(data_dir)

print("✅ Dataset downloaded and extracted!")

# Data exploration notebook
data_path = f'{project_path}/data/PlantVillage-Dataset-master/raw/color'

# Get class names and counts
classes = os.listdir(data_path)
class_counts = {}

for class_name in classes:
    class_path = os.path.join(data_path, class_name)
    if os.path.isdir(class_path):
        count = len(os.listdir(class_path))
        class_counts[class_name] = count

# Create DataFrame for analysis
df_classes = pd.DataFrame(list(class_counts.items()),
                         columns=['Class', 'Count'])
df_classes = df_classes.sort_values('Count', ascending=False)

# Create reports directory if it doesn't exist
os.makedirs(f'{project_path}/reports/', exist_ok=True)

# Visualize class distribution
plt.figure(figsize=(15, 8))
sns.barplot(data=df_classes.head(20), x='Count', y='Class')
plt.title('Top 20 Classes by Image Count')
plt.xlabel('Number of Images')
plt.tight_layout()
plt.savefig(f'{project_path}/reports/class_distribution.png')
plt.show()

print(f"✅ Total classes: {len(classes)}")
print(f"✅ Total images: {sum(class_counts.values())}")

# Create data generators
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

# Image parameters
IMG_SIZE = (224, 224)
BATCH_SIZE = 32
EPOCHS = 12

# Define project_path
project_path = "." # Or specify your desired path


# Data augmentation for training
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    zoom_range=0.2,
    validation_split=0.2
)

# Validation data generator
val_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

# Define data_path using project_path
data_path = f'{project_path}/data/PlantVillage-Dataset-master/raw/color'
print(f"Using data path: {data_path}") # Print data path for verification


# Create generators
train_generator = train_datagen.flow_from_directory(
    data_path,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

validation_generator = val_datagen.flow_from_directory(
    data_path,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# Create models directory if it doesn't exist
import os
os.makedirs(f'{project_path}/models/', exist_ok=True)

# Save class indices for later use
import json
with open(f'{project_path}/models/class_indices.json', 'w') as f:
    json.dump(train_generator.class_indices, f)

print("✅ Data generators created successfully!")
print(f"Training samples: {train_generator.samples}")
print(f"Validation samples: {validation_generator.samples}")
print(f"Number of classes: {train_generator.num_classes}")

# Build transfer learning model
def create_disease_detection_model(num_classes):
    # Load pre-trained MobileNetV2
    base_model = MobileNetV2(
        weights='imagenet',
        include_top=False,
        input_shape=(224, 224, 3)
    )

    # Freeze base model layers
    base_model.trainable = False

    # Add custom classifier
    x = base_model.output
    x = GlobalAveragePooling2D()(x)
    x = Dropout(0.2)(x)
    x = Dense(128, activation='relu')(x)
    x = Dropout(0.2)(x)
    predictions = Dense(num_classes, activation='softmax')(x)

    model = Model(inputs=base_model.input, outputs=predictions)

    return model

# Create model
num_classes = train_generator.num_classes
model = create_disease_detection_model(num_classes)

# Compile model
model.compile(
    optimizer=Adam(learning_rate=0.001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

# Model summary
model.summary()

# Training callbacks
from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping

callbacks = [
    ModelCheckpoint(
        f'{project_path}/models/best_model.keras',
        monitor='val_accuracy',
        save_best_only=True,
        verbose=1
    ),
    ReduceLROnPlateau(
        monitor='val_loss',
        factor=0.2,
        patience=5,
        min_lr=0.00001,
        verbose=1
    ),
    EarlyStopping(
        monitor='val_loss',
        patience=10,
        restore_best_weights=True,
        verbose=1
    )
]

# Train model
history = model.fit(
    train_generator,
    epochs=EPOCHS,
    validation_data=validation_generator,
    callbacks=callbacks,
    verbose=1
)

# Save final model
model.save(f'{project_path}/models/crop_disease_model.keras')
print("✅ Model training completed and saved!")

# Plot training history
def plot_training_history(history):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))

    # Accuracy plot
    ax1.plot(history.history['accuracy'], label='Training Accuracy')
    ax1.plot(history.history['val_accuracy'], label='Validation Accuracy')
    ax1.set_title('Model Accuracy')
    ax1.set_xlabel('Epoch')
    ax1.set_ylabel('Accuracy')
    ax1.legend()
    ax1.grid(True)

    # Loss plot
    ax2.plot(history.history['loss'], label='Training Loss')
    ax2.plot(history.history['val_loss'], label='Validation Loss')
    ax2.set_title('Model Loss')
    ax2.set_xlabel('Epoch')
    ax2.set_ylabel('Loss')
    ax2.legend()
    ax2.grid(True)

    plt.tight_layout()
    plt.savefig(f'{project_path}/reports/training_history.png')
    plt.show()

plot_training_history(history)

# Evaluate model on validation set
val_loss, val_accuracy = model.evaluate(validation_generator)
print(f"Validation Accuracy: {val_accuracy:.4f}")
print(f"Validation Loss: {val_loss:.4f}")

# Generate predictions for confusion matrix
validation_generator.reset()
predictions = model.predict(validation_generator)
predicted_classes = np.argmax(predictions, axis=1)
true_classes = validation_generator.classes

# Create confusion matrix
cm = confusion_matrix(true_classes, predicted_classes)
class_names = list(train_generator.class_indices.keys())

# Plot confusion matrix
plt.figure(figsize=(12, 10))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=class_names[:20], yticklabels=class_names[:20])
plt.title('Confusion Matrix (Top 20 Classes)')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.xticks(rotation=45)
plt.yticks(rotation=45)
plt.tight_layout()
plt.savefig(f'{project_path}/reports/confusion_matrix.png')
plt.show()

# Classification report
print("\nClassification Report:")
print(classification_report(true_classes, predicted_classes,
                          target_names=class_names))

import os

# Define project_path
project_path = "." # Or specify your desired path

extracted_path = f'{project_path}/data/PlantVillage-Dataset-master/raw/color'

# List directories in the extracted path
print(f"Contents of {extracted_path}:")
try:
    for item in os.listdir(extracted_path):
        print(item)
except FileNotFoundError:
    print(f"Error: The directory {extracted_path} was not found.")

import os

# Define project_path
project_path = "." # Or specify your desired path

data_dir_path = f'{project_path}/data/'

# List contents of the data directory
print(f"Contents of {data_dir_path}:")
try:
    for item in os.listdir(data_dir_path):
        print(item)
except FileNotFoundError:
    print(f"Error: The directory {data_dir_path} was not found.")